Spis treści:
			Wiersze
********************************
Tworzenie tabel 	 17-111
********************************
Dodawanie rekordów 	112-122
********************************
Procedury		123-152
********************************
Wyzwalacze		153-240
********************************
Funkcje			241-320
********************************
Widoki			321-464
********************************

********************************************************************************************************

CREATE TABLE IF NOT EXISTS `wspólnicy` (
  `id_wspólnika` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `pseudonim` VARCHAR(100) NOT NULL,
  `rola` ENUM("Menedżer", "Zarządca", "Pracownik") NOT NULL,
  `udział` DECIMAL(3,2) NOT NULL,
  PRIMARY KEY (`id_wspólnika`))

CREATE TABLE IF NOT EXISTS `towary` (
  `id_towaru` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nazwa` VARCHAR(50) NOT NULL,
  `waga_całkowita` INT UNSIGNED NOT NULL,
  `cena_kg_dostawy` INT UNSIGNED NOT NULL,
  `cena_kg_sprzedaży` INT NOT NULL,
  PRIMARY KEY (`id_towaru`))

CREATE TABLE IF NOT EXISTS `klienci` (
  `id_klienta` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `pseudonim` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id_klienta`))

CREATE TABLE IF NOT EXISTS `sprzedaże` (
  `id_sprzedaży` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `klienci_id_klienta` INT UNSIGNED NOT NULL,
  `data_sprzedaży` DATE NOT NULL,
  PRIMARY KEY (`id_sprzedaży`, `klienci_id_klienta`),
  CONSTRAINT `fk_sprzedaże_klienci1`
    FOREIGN KEY (`klienci_id_klienta`)
    REFERENCES `klienci` (`id_klienta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)

CREATE TABLE IF NOT EXISTS `dostawcy` (
  `id_dostawcy` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `pseudonim` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id_dostawcy`))

CREATE TABLE IF NOT EXISTS `dostawy` (
  `id_dostawy` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `dostawcy_id_dostawcy` INT UNSIGNED NOT NULL,
  `data_dostawy` DATE NOT NULL,
  PRIMARY KEY (`id_dostawy`, `dostawcy_id_dostawcy`),
  CONSTRAINT `fk_dostawy_dostawcy1`
    FOREIGN KEY (`dostawcy_id_dostawcy`)
    REFERENCES `dostawcy` (`id_dostawcy`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)

CREATE TABLE IF NOT EXISTS `towary_dostawy` (
  `id_akcji` INT NOT NULL AUTO_INCREMENT,
  `towary_id_towaru` INT UNSIGNED NOT NULL,
  `dostawy_id_dostawy` INT UNSIGNED NOT NULL,
  `wspólnicy_id_wspólnika` INT UNSIGNED NOT NULL,
  `waga_towaru` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_akcji`, `towary_id_towaru`, `dostawy_id_dostawy`, `wspólnicy_id_wspólnika`),
  CONSTRAINT `fk_towary_has_dostawy_towary1`
    FOREIGN KEY (`towary_id_towaru`)
    REFERENCES `towary` (`id_towaru`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_towary_has_dostawy_dostawy1`
    FOREIGN KEY (`dostawy_id_dostawy`)
    REFERENCES `dostawy` (`id_dostawy`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_towary_dostawy_wspólnicy1`
    FOREIGN KEY (`wspólnicy_id_wspólnika`)
    REFERENCES `wspólnicy` (`id_wspólnika`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)

CREATE TABLE IF NOT EXISTS `towary_sprzedaże` (
  `id_akcji` INT NOT NULL AUTO_INCREMENT,
  `towary_id_towaru` INT UNSIGNED NOT NULL,
  `sprzedaże_id_sprzedaży` INT UNSIGNED NOT NULL,
  `wspólnicy_id_wspólnika` INT UNSIGNED NOT NULL,
  `waga_towaru` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_akcji`, `towary_id_towaru`, `sprzedaże_id_sprzedaży`, `wspólnicy_id_wspólnika`),
  CONSTRAINT `fk_towary_has_sprzedaże_towary1`
    FOREIGN KEY (`towary_id_towaru`)
    REFERENCES `towary` (`id_towaru`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_towary_has_sprzedaże_sprzedaże1`
    FOREIGN KEY (`sprzedaże_id_sprzedaży`)
    REFERENCES `sprzedaże` (`id_sprzedaży`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_towary_sprzedaże_wspólnicy1`
    FOREIGN KEY (`wspólnicy_id_wspólnika`)
    REFERENCES `wspólnicy` (`id_wspólnika`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)

********************************************************************************************************

INSERT INTO klienci (pseudonim) VALUES  ('Mati'),  ('Seba'),  ('Adi'),  ('Mały'),     ('Kucharz'),  ('Gruby'),     ('Ibra'),  ('Piter'),     ('Piston'),  ('Łysy'),     ('Owca'),  ('Rudy')
INSERT INTO dostawcy (pseudonim) VALUES  ('Dmitrij'),  ('Sergiej'),  ('Wasilij'),     ('Bazyli'),     ('Michaił'),     ('Iwan'),     ('Olgierd'),     ('Aleksiej'),     ('Oleg'),     ('Jurij'),     ('Władimir')
INSERT INTO towary (nazwa, waga_całkowita, cena_kg_dostawy, cena_kg_sprzedaży) VALUES  ('towar_1', '100', '20', '50'),  ('towar_2', '90', '30', '70'),     ('towar_3', '45', '40', '60'),     ('towar_4', '50', '35', '80'),     ('towar_5', '40', '55', '75'),     ('towar_6', '30', '35', '55'),     ('towar_7', '65', '90', '110'),     ('towar_8', '70', '10', '30'),     ('towar_9', '100', '15', '50'),     ('towar_10', '25', '25', '40'),     ('towar_11', '20', '10', '30'),     ('towar_12', '30', '45', '80')
INSERT INTO wspólnicy (pseudonim, rola, udział) VALUES  ('Zeus', 'Menedżer', '0.16'),  ('Terminator', 'Zarządca', '0.12'),  ('Gandalf', 'Zarządca', '0.12'),     ('Krzychu', 'Pracownik', '0.06'),  ('Kadet', 'Pracownik', '0.06'),     ('Masa', 'Pracownik', '0.06'),  ('Smerf', 'Pracownik', '0.06'),     ('Cezar', 'Pracownik', '0.06'),  ('Mars', 'Pracownik', '0.06'),     ('Herkules', 'Pracownik', '0.06'),  ('Harry', 'Pracownik', '0.06'),     ('Kiler', 'Pracownik', '0.06'),  ('Maniek', 'Pracownik', '0.06')
insert into dostawy (dostawcy_id_dostawcy, data_dostawy) values ('1', '2020-09-01'), ('3', '2020-08-15'), ('3', '2020-09-02'), ('4', '2020-11-15'), ('6', '2020-12-10'), ('7', '2020-07-19'), ('7', '2020-09-09'), ('8', '2020-08-15'), ('10', '2021-01-02'), ('11', '2020-06-11'), ('11', '2020-07-18'), ('11', '2020-10-25')
insert into towary_dostawy (towary_id_towaru, dostawy_id_dostawy, wspólnicy_id_wspólnika, waga_towaru) values ('2', '1', '5', '10'), ('1', '1', '5', '15'), ('5', '2', '9', '20'), ('9', '3', '10', '10'), ('12', '3', '10', '15'), ('3', '4', '11', '10'), ('11', '5', '7', '35'), ('4', '6', '13', '20'), ('7', '7', '12', '25'), ('8', '7', '12', '15'), ('10', '7', '12', '10'), ('6', '8', '2', '10'), ('5', '8', '2', '20'), ('1', '9', '1', '25'), ('2', '9', '1', '15'), ('4', '9', '1', '15'), ('3', '10', '9', '10'), ('8', '11', '4', '10'), ('10', '11', '4', '5'), ('12', '12', '6', '10')
insert into sprzedaże (klienci_id_klienta, data_sprzedaży) values ('1', '2019-12-12'), ('2', '2020-02-14'), ('3', '2020-01-02'), ('5', '2020-05-09'), ('5', '2020-08-23'), ('6', '2020-07-05'), ('7', '2020-03-20'), ('8', '2020-09-15'), ('9', '2020-12-12'), ('9', '2020-11-18'), ('9', '2020-10-21'), ('10', '2020-01-04'), ('11', '2020-09-08'), ('11', '2020-11-23'), ('11', '2020-05-12')
insert into towary_sprzedaże (towary_id_towaru, sprzedaże_id_sprzedaży, wspólnicy_id_wspólnika, waga_towaru) values ('2', '1', '1', '5'), ('9', '1', '1', '10'), ('5', '2', '3', '5'), ('3', '3', '2', '5'), ('7', '3', '2', '5'), ('12', '3', '2', '10'), ('10', '4', '5', '10'), ('11', '5', '10', '10'), ('6', '6', '13', '5'), ('2', '7', '12', '10'), ('1', '7', '12', '5'), ('7', '8', '4', '10'), ('1', '9', '6', '5'), ('7', '10', '5', '5'), ('3', '11', '8', '5'), ('1', '11', '8', '10'), ('4', '11', '8', '10'), ('8', '12', '10', '5'), ('9', '12', '10', '10'), ('11', '13', '4', '15'), ('11', '14', '3', '5'), ('6', '14', '3', '5'), ('7', '15', '11', '10'), ('4', '15', '11', '5'), ('3', '15', '11', '10')

********************************************************************************************************

CREATE PROCEDURE sprzedaż(in waga int, in id int)  
begin  
update towary 
set towary.waga_całkowita = towary.waga_całkowita - waga 
where towary.id_towaru = id;  end

CREATE PROCEDURE dostawa(in waga int, in id int)  
begin  
update towary 
set towary.waga_całkowita = towary.waga_całkowita + waga 
where towary.id_towaru = id;  
end

create procedure zmiana_udziału()  
begin 
declare menedżer int;
declare zarządca int;
declare pracownik int;
declare współczynnik decimal(3,2);
select ilosc into menedżer from (select rola, count(id_wspólnika) as ilosc from wspólnicy group by rola) w where w.rola = 'Menedżer';
select ilosc into zarządca from (select rola, count(id_wspólnika) as ilosc from wspólnicy group by rola) w where w.rola = 'Zarządca';
select ilosc into pracownik from (select rola, count(id_wspólnika) as ilosc from wspólnicy group by rola) w where w.rola = 'Pracownik';
set współczynnik = 1.00/((3*menedżer)+(2*zarządca)+(Pracownik));
update wspólnicy set wspólnicy.udział = (1.00-(2*współczynnik*zarządca)-(współczynnik*pracownik)) where wspólnicy.rola = 'Menedżer';
update wspólnicy set wspólnicy.udział = (2*współczynnik) where wspólnicy.rola = 'Zarządca';
update wspólnicy set wspólnicy.udział = (współczynnik) where wspólnicy.rola = 'Pracownik';
end

********************************************************************************************************

create trigger nowa_dostawa before insert  on towary_dostawy 
for each row  
call dostawa(new.waga_towaru, new.towary_id_towaru)

create trigger nowa_sprzedaż  before insert   on towary_sprzedaże  
for each row   
IF   new.waga_towaru > (select waga_całkowita from towary t where t.id_towaru = new.towary_id_towaru) 
THEN    SIGNAL SQLSTATE '45000'     SET MESSAGE_TEXT = 'Zbyt mało towaru w magazynie';     
else 
call sprzedaż(new.waga_towaru, new.towary_id_towaru);  
END IF;

create trigger del_sprzedaż before delete on towary_sprzedaże 
for each row  
call dostawa(old.waga_towaru, old.towary_id_towaru)

create trigger del_dostawa before delete on towary_dostawy 
for each row 
IF   old.waga_towaru > (select waga_całkowita from towary t where t.id_towaru = old.towary_id_towaru) 
THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Zbyt mało towaru w magazynie'; 
else 
call sprzedaż(old.waga_towaru, old.towary_id_towaru);  
END IF;

create trigger rm_dostawa before delete on dostawy 
for each row  
delete from towary_dostawy 
where towary_dostawy.dostawy_id_dostawy = old.id_dostawy

create trigger rm_sprzedaż before delete on sprzedaże 
for each row  
delete from towary_sprzedaże 
where towary_sprzedaże.sprzedaże_id_sprzedaży = old.id_sprzedaży

create trigger mod_dostawa before update on dostawy 
for each row 
update towary_dostawy 
set towary_dostawy.dostawy_id_dostawy = new.id_dostawy 
where towary_dostawy.dostawy_id_dostawy = old.id_dostawy

create trigger mod_sprzedaż before update on sprzedaże 
for each row 
update towary_sprzedaże 
set towary_sprzedaże.sprzedaże_id_sprzedaży = new.id_sprzedaży 
where towary_sprzedaże.sprzedaże_id_sprzedaży = old.id_sprzedaży

create trigger mod_waga_dostawa before update on towary_dostawy 
for each row 
begin 
declare waga_o int; 
declare waga_n int; 
declare waga_c int; 
set waga_o = old.waga_towaru; 
set waga_n = new.waga_towaru; 
set waga_c = (select waga_całkowita from towary t where t.id_towaru = new.towary_id_towaru); 
if waga_n>waga_o then 
call dostawa(new.waga_towaru, new.towary_id_towaru); 
call sprzedaż(old.waga_towaru, old.towary_id_towaru); 
elseif waga_o-waga_n>waga_c THEN 
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Zbyt mało towaru w magazynie'; 
else 
call dostawa(new.waga_towaru, new.towary_id_towaru); 
call sprzedaż(old.waga_towaru, old.towary_id_towaru); 
end if; 
end

create trigger mod_waga_sprzedaż before update on towary_sprzedaże
for each row 
begin 
declare waga_o int; 
declare waga_n int; 
declare waga_c int; 
set waga_o = old.waga_towaru; 
set waga_n = new.waga_towaru; 
set waga_c = (select waga_całkowita from towary t where t.id_towaru = new.towary_id_towaru); 
if waga_n<waga_o then 
call dostawa(new.waga_towaru, new.towary_id_towaru); 
call sprzedaż(old.waga_towaru, old.towary_id_towaru); 
elseif waga_n-waga_o>waga_c THEN 
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Zbyt mało towaru w magazynie'; 
else 
call dostawa(old.waga_towaru, old.towary_id_towaru); 
call sprzedaż(new.waga_towaru, new.towary_id_towaru); 
end if; 
end

********************************************************************************************************

CREATE FUNCTION `ocena_kontrahenta`(obrót int) RETURNS varchar(50)
DETERMINISTIC
begin
declare ocena varchar(50);
if obrót < 1 then
set ocena = 'Nieznajomy';
elseif obrót >= 1 and obrót < 1000 then
set ocena = 'Rzadki kontrahent';
elseif obrót >= 1000 then
set ocena = 'Stały bywalec';
end if;
return ocena;
end

CREATE FUNCTION ocena_wspólnika(akcje int) RETURNS varchar(50)
DETERMINISTIC
begin
declare ocena varchar(50);
if akcje < 2 then
set ocena = 'Nierób';
elseif akcje >= 2 and akcje < 4 then
set ocena = 'Przeciętny';
elseif akcje >= 5 then
set ocena = 'Pracowity';
end if;
return ocena;
end;

create function przydział_pensji(udział decimal(3,2)) returns int
deterministic
begin
declare pensja int;
declare zysk int;
set zysk = (select sum(x.bilans) as bilans from (select x.nazwa, y.zyski-x.wydatki as bilans  from
(select t.nazwa, d.waga*t.cena_kg_dostawy as wydatki from towary t join
(select d.towary_id_towaru as id, sum(d.waga_towaru) as waga
from towary_dostawy d group by d.towary_id_towaru) d
on d.id = t.id_towaru) x join
(select t.nazwa, d.waga*t.cena_kg_sprzedaży as zyski from towary t join
(select d.towary_id_towaru as id, sum(d.waga_towaru) as waga
from towary_sprzedaże d group by d.towary_id_towaru) d
on d.id = t.id_towaru) y on x.nazwa = y.nazwa) x);
set pensja = udział*zysk;
return pensja;
end

CREATE FUNCTION polski_miesiąc(miesiąc int) RETURNS varchar(50)
DETERMINISTIC
begin
declare nazwa varchar(50);
if miesiąc = '1' then
set nazwa = 'Styczeń';
elseif miesiąc = '2' then
set nazwa = 'Luty';
elseif miesiąc = '3' then
set nazwa = 'Marzec';
elseif miesiąc = '4' then
set nazwa = 'Kwiecień';
elseif miesiąc = '5' then
set nazwa = 'Maj';
elseif miesiąc = '6' then
set nazwa = 'Czerwiec';
elseif miesiąc = '7' then
set nazwa = 'Lipiec';
elseif miesiąc = '8' then
set nazwa = 'Sierpień';
elseif miesiąc = '9' then
set nazwa = 'Wrzesień';
elseif miesiąc = '10' then
set nazwa = 'Październik';
elseif miesiąc = '11' then
set nazwa = 'Listopad';
elseif miesiąc = '12' then
set nazwa = 'Grudzień';
end if;
return nazwa;
end

********************************************************************************************************

create view bilans_całkowity as select sum(x.bilans) as bilans from (select x.nazwa, y.zyski-x.wydatki as bilans  from
(select t.nazwa, d.waga*t.cena_kg_dostawy as wydatki from towary t join
(select d.towary_id_towaru as id, sum(d.waga_towaru) as waga
from towary_dostawy d group by d.towary_id_towaru) d
on d.id = t.id_towaru) x join
(select t.nazwa, d.waga*t.cena_kg_sprzedaży as zyski from towary t join
(select d.towary_id_towaru as id, sum(d.waga_towaru) as waga
from towary_sprzedaże d group by d.towary_id_towaru) d
on d.id = t.id_towaru) y on x.nazwa = y.nazwa) x

create view bilans_towary as select x.nazwa, y.zyski-x.wydatki as bilans  
from (select t.nazwa, d.waga*t.cena_kg_dostawy as wydatki from towary t join 
(select d.towary_id_towaru as id, sum(d.waga_towaru) as waga from towary_dostawy d group by d.towary_id_towaru) d on d.id = t.id_towaru) x join 
(select t.nazwa, d.waga*t.cena_kg_sprzedaży as zyski from towary t join 
(select d.towary_id_towaru as id, sum(d.waga_towaru) as waga from towary_sprzedaże d group by d.towary_id_towaru) d on d.id = t.id_towaru) y on x.nazwa = y.nazwa

create view zyski_towary as select t.nazwa, d.waga*t.cena_kg_sprzedaży as zyski from towary t join 
(select d.towary_id_towaru as id, sum(d.waga_towaru) as waga from towary_sprzedaże d group by d.towary_id_towaru) d on d.id = t.id_towaru

create view wydatki_towary as select t.nazwa, t.cena_kg_dostawy*d.waga as wydatki from towary t  join 
(select d.towary_id_towaru as id, sum(d.waga_towaru) as waga from towary_dostawy d group by d.towary_id_towaru) d on t.id_towaru = d.id

CREATE VIEW `dostawcy_dostawy` AS select `k`.`pseudonim` AS `pseudonim`,count(`s`.`id_dostawy`) AS `ilość_dostaw` from 
(`dostawcy` `k` left join `dostawy` `s` on((`k`.`id_dostawcy` = `s`.`dostawcy_id_dostawcy`))) group by `k`.`pseudonim`;

CREATE VIEW `wspólnicy_dostawy` AS SELECT `k`.`pseudonim` AS `pseudonim`, COUNT(`d`.`dostawy_id_dostawy`) AS `ilość_dostaw`FROM
(`wspólnicy` `k` LEFT JOIN `towary_dostawy` `d` ON ((`k`.`id_wspólnika` = `d`.`wspólnicy_id_wspólnika`))) GROUP BY `k`.`id_wspólnika`

CREATE VIEW `wspólnicy_sprzedaże` AS select `k`.`pseudonim` AS `pseudonim`,count(`d`.`sprzedaże_id_sprzedaży`) AS `ilość_sprzedaży` from 
(`wspólnicy` `k` left join `towary_sprzedaże` `d` on((`k`.`id_wspólnika` = `d`.`wspólnicy_id_wspólnika`))) group by `k`.`id_wspólnika`;

CREATE VIEW `klienci_sprzedaże` AS select `k`.`pseudonim` AS `pseudonim`, count(`s`.`id_sprzedaży`) AS `ilość_sprzedaży` from 
(`klienci` `k` left join `sprzedaże` `s` on((`k`.`id_klienta` = `s`.`klienci_id_klienta`))) group by `k`.`pseudonim`;

CREATE VIEW `dostawcy_obrót` AS select `k`.`pseudonim` AS `pseudonim`, ifnull(`t`.`obrót`,'0') AS `obrót` from 
(`dostawcy` `k` left join 
(select `k`.`dostawca` AS `dostawca`,sum((`t`.`cena_kg_dostawy` * `k`.`waga`)) AS `obrót` from 
((select `s`.`dostawcy_id_dostawcy` AS `dostawca`,`t`.`towar` AS `towar`,`t`.`waga` AS `waga` from 
((select `towary_dostawy`.`dostawy_id_dostawy` AS `id`,`towary_dostawy`.`towary_id_towaru` AS `towar`,`towary_dostawy`.`waga_towaru` AS `waga` from `towary_dostawy`) `t` join 
`dostawy` `s` on((`t`.`id` = `s`.`id_dostawy`)))) `k` join 
`towary` `t` on((`k`.`towar` = `t`.`id_towaru`))) group by `k`.`dostawca` order by `k`.`dostawca`) `t` on((`k`.`id_dostawcy` = `t`.`dostawca`)));

CREATE VIEW `klienci_obrót` AS select `k`.`pseudonim` AS `pseudonim`, ifnull(`t`.`obrót`,'0') AS `obrót` from 
(`klienci` `k` left join 
(select `k`.`klient` AS `klient`,sum((`t`.`cena_kg_sprzedaży` * `k`.`waga`)) AS `obrót` from 
((select `s`.`klienci_id_klienta` AS `klient`,`t`.`towar` AS `towar`,`t`.`waga` AS `waga` from 
((select `towary_sprzedaże`.`sprzedaże_id_sprzedaży` AS `id`,`towary_sprzedaże`.`towary_id_towaru` AS `towar`,`towary_sprzedaże`.`waga_towaru` AS `waga` from `towary_sprzedaże`) `t` join 
`sprzedaże` `s` on((`t`.`id` = `s`.`id_sprzedaży`)))) `k` join `towary` `t` on((`k`.`towar` = `t`.`id_towaru`))) group by `k`.`klient` order by `k`.`klient`) `t` on((`k`.`id_klienta` = `t`.`klient`)));

CREATE VIEW `dostawcy_ocena` AS select `k`.`pseudonim` AS `pseudonim`,`ocena_kontrahenta`(`k`.`obrót`) AS `ocena` from 
(select `k`.`pseudonim` AS `pseudonim`,ifnull(`t`.`obrót`,'0') AS `obrót` from (`dostawcy` `k` left join 
(select `k`.`dostawca` AS `dostawca`,sum((`t`.`cena_kg_dostawy` * `k`.`waga`)) AS `obrót` from 
((select `s`.`dostawcy_id_dostawcy` AS `dostawca`,`t`.`towar` AS `towar`,`t`.`waga` AS `waga` from 
((select `towary_dostawy`.`dostawy_id_dostawy` AS `id`,`towary_dostawy`.`towary_id_towaru` AS `towar`,`towary_dostawy`.`waga_towaru` AS `waga` from `towary_dostawy`) `t` join 
`dostawy` `s` on((`t`.`id` = `s`.`id_dostawy`)))) `k` join 
`towary` `t` on((`k`.`towar` = `t`.`id_towaru`))) group by `k`.`dostawca` order by `k`.`dostawca`) `t` on((`k`.`id_dostawcy` = `t`.`dostawca`)))) `k`;

CREATE VIEW `klienci_ocena` AS select `k`.`pseudonim` AS `pseudonim`,`ocena_kontrahenta`(`k`.`obrót`) AS `ocena` from 
(select `k`.`pseudonim` AS `pseudonim`,ifnull(`t`.`obrót`,'0') AS `obrót` from (`klienci` `k` left join 
(select `k`.`klient` AS `klient`,sum((`t`.`cena_kg_sprzedaży` * `k`.`waga`)) AS `obrót` from 
((select `s`.`klienci_id_klienta` AS `klient`,`t`.`towar` AS `towar`,`t`.`waga` AS `waga` from 
((select `towary_sprzedaże`.`sprzedaże_id_sprzedaży` AS `id`,`towary_sprzedaże`.`towary_id_towaru` AS `towar`,`towary_sprzedaże`.`waga_towaru` AS `waga` from `towary_sprzedaże`) `t` join 
`sprzedaże` `s` on((`t`.`id` = `s`.`id_sprzedaży`)))) `k` join 
`towary` `t` on((`k`.`towar` = `t`.`id_towaru`))) group by `k`.`klient` order by `k`.`klient`) `t` on((`k`.`id_klienta` = `t`.`klient`)))) `k`;

create view wspólnicy_pensja as select pseudonim, rola, przydział_pensji(udział) as pensja from wspólnicy

create view ocena_wspólnika as select k.pseudonim, k.ilość_dostaw+l.ilość_sprzedaży as ilość_akcji, ocena_wspólnika(k.ilość_dostaw+l.ilość_sprzedaży) as ocena from 
(SELECT k.pseudonim AS pseudonim, COUNT(d.dostawy_id_dostawy) AS ilość_dostaw FROM
(wspólnicy k LEFT JOIN towary_dostawy d ON ((k.id_wspólnika = d.wspólnicy_id_wspólnika))) GROUP BY k.id_wspólnika) k
join
(select k.pseudonim AS pseudonim,count(d.sprzedaże_id_sprzedaży) AS ilość_sprzedaży from 
(wspólnicy k left join towary_sprzedaże d on((k.id_wspólnika = d.wspólnicy_id_wspólnika))) group by k.id_wspólnika) l
on k.pseudonim = l.pseudonim

create view widok_dostaw as select t.id_akcji, tw.nazwa, w.pseudonim as wspólnik, d.pseudonim as dostawca, t.waga_towaru from towary_dostawy t
join (select t.id_dostawy, d.pseudonim from dostawy t 
join dostawcy d on d.id_dostawcy = t.dostawcy_id_dostawcy) d
on d.id_dostawy = t.dostawy_id_dostawy
join wspólnicy w on w.id_wspólnika = t.wspólnicy_id_wspólnika
join towary tw on tw.id_towaru = t.towary_id_towaru

create view widok_sprzedaży as select t.id_akcji, tw.nazwa, w.pseudonim as wspólnik, d.pseudonim as klient, t.waga_towaru from towary_sprzedaże t
join (select t.id_sprzedaży, d.pseudonim from sprzedaże t 
join klienci d on d.id_klienta = t.klienci_id_klienta) d
on d.id_sprzedaży = t.sprzedaże_id_sprzedaży
join wspólnicy w on w.id_wspólnika = t.wspólnicy_id_wspólnika
join towary tw on tw.id_towaru = t.towary_id_towaru

create view wspólnicy_spotkania as (select distinct x.data_spotkania, x.wspólnik, x.osoba from 
(select t.id_akcji, tw.nazwa, w.pseudonim as wspólnik, d.pseudonim as osoba, d.data_spotkania, t.waga_towaru from towary_dostawy t
join (select t.data_dostawy as data_spotkania, t.id_dostawy, d.pseudonim from dostawy t 
join dostawcy d on d.id_dostawcy = t.dostawcy_id_dostawcy) d
on d.id_dostawy = t.dostawy_id_dostawy
join wspólnicy w on w.id_wspólnika = t.wspólnicy_id_wspólnika
join towary tw on tw.id_towaru = t.towary_id_towaru) x
union
select distinct y.data_spotkania, y.wspólnik, y.osoba from 
(select t.id_akcji, tw.nazwa, w.pseudonim as wspólnik, d.pseudonim as osoba, d.data_spotkania, t.waga_towaru from towary_sprzedaże t
join (select t.data_sprzedaży as data_spotkania, t.id_sprzedaży, d.pseudonim from sprzedaże t 
join klienci d on d.id_klienta = t.klienci_id_klienta) d
on d.id_sprzedaży = t.sprzedaże_id_sprzedaży
join wspólnicy w on w.id_wspólnika = t.wspólnicy_id_wspólnika
join towary tw on tw.id_towaru = t.towary_id_towaru) y) order by data_spotkania desc

create view bilans_miesięczny as select rok, polski_miesiąc(miesiąc) as miesiąc, bilans from 
(select rok, miesiąc, sum(zysk) as bilans from (select year(s.data_sprzedaży) as rok, month(s.data_sprzedaży) as miesiąc, t.waga_towaru*x.cena_kg_sprzedaży as zysk
from towary_sprzedaże t join sprzedaże s on s.id_sprzedaży = t.sprzedaże_id_sprzedaży
join towary x on x.id_towaru = t.towary_id_towaru
union all
select year(s.data_dostawy) as rok, month(s.data_dostawy) as miesiąc, -1*cast(t.waga_towaru*x.cena_kg_dostawy as signed) as zysk
from towary_dostawy t join dostawy s on s.id_dostawy = t.dostawy_id_dostawy
join towary x on x.id_towaru = t.towary_id_towaru) x group by rok, miesiąc order by rok desc, miesiąc desc, zysk desc) x

create view stan_początkowy as select t.nazwa, t.waga_całkowita+s.sprzedaże-d.dostawy as waga_początkowa, (t.waga_całkowita+s.sprzedaże-d.dostawy)*t.cena_kg_sprzedaży as wartość from towary t
join
(select t.nazwa, d.waga as dostawy from towary t join 
(select d.towary_id_towaru as id, sum(d.waga_towaru) as waga from towary_dostawy d group by d.towary_id_towaru) d on d.id = t.id_towaru) d on t.nazwa = d.nazwa
join
(select t.nazwa, d.waga as sprzedaże from towary t join 
(select d.towary_id_towaru as id, sum(d.waga_towaru) as waga from towary_sprzedaże d group by d.towary_id_towaru) d on d.id = t.id_towaru) s on t.nazwa = s.nazwa

create view zysk_potencjał as select sum(t.wartość) as wartość_początkowa_magazynu, sum(t.wartość_obecna) as wartość_obecna_magazynu, b.bilans as zysk_rzeczywisty, sum(t.wartość_obecna)+b.bilans-sum(t.wartość) as zysk_potencjalny from 
(select t.nazwa, t.waga_całkowita*t.cena_kg_sprzedaży as wartość_obecna, t.waga_całkowita+s.sprzedaże-d.dostawy as waga_początkowa, (t.waga_całkowita+s.sprzedaże-d.dostawy)*t.cena_kg_sprzedaży as wartość from towary t
join
(select t.nazwa, d.waga as dostawy from towary t join 
(select d.towary_id_towaru as id, sum(d.waga_towaru) as waga from towary_dostawy d group by d.towary_id_towaru) d on d.id = t.id_towaru) d on t.nazwa = d.nazwa
join
(select t.nazwa, d.waga as sprzedaże from towary t join 
(select d.towary_id_towaru as id, sum(d.waga_towaru) as waga from towary_sprzedaże d group by d.towary_id_towaru) d on d.id = t.id_towaru) s on t.nazwa = s.nazwa) t
join
(select sum(x.bilans) as bilans from (select x.nazwa, y.zyski-x.wydatki as bilans  from
(select t.nazwa, d.waga*t.cena_kg_dostawy as wydatki from towary t join
(select d.towary_id_towaru as id, sum(d.waga_towaru) as waga
from towary_dostawy d group by d.towary_id_towaru) d
on d.id = t.id_towaru) x join
(select t.nazwa, d.waga*t.cena_kg_sprzedaży as zyski from towary t join
(select d.towary_id_towaru as id, sum(d.waga_towaru) as waga
from towary_sprzedaże d group by d.towary_id_towaru) d
on d.id = t.id_towaru) y on x.nazwa = y.nazwa) x) b

********************************************************************************************************